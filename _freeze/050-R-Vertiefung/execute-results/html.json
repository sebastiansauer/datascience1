{
  "hash": "5b8801da2a1f7548d0c19b56d4ac1f91",
  "result": {
    "markdown": "\n\n# R, zweiter Blick\n\n\n\n\nBenötigte R-Pakete für dieses Kapitel:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-1_d00f1c647e6a21f3359336bc45750fed'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n\n\n## Lernsteuerung\n\n### Literatur\n\n- Rhys, Kap. 2\n- MODAR, Kap. 5 \n\n###  Lernziele\n\n- Sie können Funktionen, in R schreiben.\n- Sie können Datensätze vom Lang- und Breit-Format wechseln.\n- Sie können Wiederholungsstrukturen wie Mapping-Funktionen anwenden.\n- Sie können eine dplyr-Funktion auf mehrere Spalten gleichzeitig anwenden.\n    \n###  Vorbereitung\n\n- Lesen Sie die Literatur.\n\n\n\n\n\n## Objekttypen in R\n\nNäheres zu Objekttypen findet sich in @modar, Kap. 5.2.\n\n\n### Überblick\n\nIn R ist praktisch alles ein Objekt. \n\n:::{#def-obj}\n### Objekt (Informatik)\nEin Objekt meint ein im Computerspeicher repräsentiertes Ding, etwa eine Tabelle.$\\square$\n:::\n\n:::{#exm-obs}\n### Beispiele für Objekte\nVektoren und Dataframes (Tibbles) sind die vielleicht gängigsten Objektarten in R (vgl. @fig-obs), aus @modar).$\\square$\n:::\n\n![Zentrale Objektarten in R](img/zentrale_objektarten.png){#fig-obs}\n\n\nEs gibt in R keine (Objekte für) Skalare (einzelne Zahlen).\nStattdessen nutzt R Vektoren der Länge 1.\n\nEin nützliches Schema stammt aus @r4ds, s. @fig-objtypes).\n\n![Objektarten hierarchisch gegliedert](img/data-structures-overview.png){#fig-objtypes}\n\n\n\n\n### Taxonomie\n\nUnter *homogenen* Objektiven verstehen wir Datenstrukturen, \ndie nur eine Art von Daten (wie Text oder Ganze Zahlen) fassen.\nSonstige Objekte nennen wir *heterogen*.\n\n\n- Homogene Objekte\n    - Vektoren \n    - Matrizen\n- Heterogen\n    - Liste\n    - Dataframes (Tibbles)\n    \n    \n    \n#### Vektoren\n\n*Vektoren* sind insofern zentral in R,\nals dass die übrigen Datenstrukturen auf ihnen aufbauen, vgl.  @fig-vektorenimzentrum aus @modar.\n\nReine (atomare) Vektoren in R sind eine geordnete Liste von Daten eines Typs.\n\n\n![Vektoren stehen im Zentrum der Datenstrukturen in R](img/Datenstrukturen.png){#fig-vektorenimzentrum}\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-2_1918beaa2efc5e113406a3a78b2bbab9'}\n\n```{.r .cell-code}\nein_vektor <- c(1, 2, 3)\nnoch_ein_vektor <- c(\"A\", \"B\", \"C\")\nlogischer_vektor <- c(TRUE, FALSE, TRUE)\n```\n:::\n\n\n\nMit `str()` kann man sich die `Str`uktur eines Objektsausgeben lassen:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-3_da3846b1820f2417dff064a6c80a330d'}\n\n```{.r .cell-code}\nstr(ein_vektor)\n##  num [1:3] 1 2 3\nstr(noch_ein_vektor)\n##  chr [1:3] \"A\" \"B\" \"C\"\nstr(logischer_vektor)\n##  logi [1:3] TRUE FALSE TRUE\n```\n:::\n\n\n\nVektoren können von folgenden Typen sein:\n\n- Kommazahlen ( `double`) genannt\n- Ganzzahlig (`integer`, auch mit `L` für *Long* abgekürzt)\n- Text (´character`, String)\n- logische Ausdrücke (`logical` oder `lgl`) mit `TRUE` oder `FALSE`\n\n\nKommazahlen und Ganze Zahlen zusammen bilden den Typ `numeric` (numerisch) in R.\n\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-4_17095909493797b5f6aaa9a5816dc4a8'}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n\n\n\nDen Typ eines Vektors kann man mit `typeof()` ausgeben lassen:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-5_d0f5c9643e460d39a170fcdf5054ad00'}\n\n```{.r .cell-code}\ntypeof(ein_vektor)\n## [1] \"double\"\n```\n:::\n\n\n\n\n#### Faktoren\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-6_3a540451a71c20d969d8862f17293ec1'}\n\n```{.r .cell-code}\nsex <- factor(c(\"Mann\", \"Frau\", \"Frau\"))\n```\n:::\n\n\nInteressant:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-7_88a5a87aaf1f0bd07a3a18befa44b72d'}\n\n```{.r .cell-code}\nstr(sex)\n##  Factor w/ 2 levels \"Frau\",\"Mann\": 2 1 1\n```\n:::\n\n\n\nVertiefende Informationen findet sich in @r4ds.\n\n#### Listen\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-8_8ff37dc5b7f2dcdafa0e4151bf5b1d72'}\n\n```{.r .cell-code}\neine_liste <- list(titel = \"Einführung\",\n                   woche = 1,\n                   datum = c(\"2022-03-14\", \"2202-03-21\"),\n                   lernziele = c(\"dies\", \"jenes\", \"und noch mehr\"),\n                   lehre = c(TRUE, TRUE, TRUE)\n                   )\nstr(eine_liste)\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n```\n:::\n\n\n\n\n\n#### Tibbles\n\nFür `tibble()` brauchen wir `tidyverse`:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-9_06786cb0aa278d7c937aed8ebe2dd4ab'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell hash='050-R-Vertiefung_cache/html/tibble-ex_1c40d071760613beaf4731ca45a84ba3'}\n\n```{.r .cell-code}\n\nstudentis <-\n  tibble(\n    name = c(\"Anna\", \"Berta\"),\n    motivation = c(10, 20),\n    noten = c(1.3, 1.7)\n  )\nstr(studentis)\n## tibble [2 × 3] (S3: tbl_df/tbl/data.frame)\n##  $ name      : chr [1:2] \"Anna\" \"Berta\"\n##  $ motivation: num [1:2] 10 20\n##  $ noten     : num [1:2] 1.3 1.7\n```\n:::\n\n\n\n\n### Indizieren\n\nEinen Teil eines Objekts auszulesen, bezeichnen wir als *Indizieren*.\n\n\n#### Reine Vektoren\n\nZur Erinnerung:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-10_d542ecd639ef99f0dc9024323af343b6'}\n\n```{.r .cell-code}\nstr(ein_vektor)\n##  num [1:3] 1 2 3\n```\n:::\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-11_c3595e5353e137f72648c08eaff9a55e'}\n\n```{.r .cell-code}\nein_vektor[1]\n## [1] 1\nein_vektor[c(1,2)]\n## [1] 1 2\n```\n:::\n\n\nAber *nicht* so:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-12_57be401e632bb9f88ed321df4b50721c'}\n\n```{.r .cell-code}\nein_vektor[1,2]\n## Error in ein_vektor[1, 2]: incorrect number of dimensions\n```\n:::\n\n\nMan darf Vektoren auch wie Listen ansprechen, also eine doppelte Eckklammer zum Indizieren verwenden\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-13_16d81a5b57e4bd8348f31ea6808a4c6d'}\n\n```{.r .cell-code}\nein_vektor[[2]]\n## [1] 2\n```\n:::\n\n\nDer Grund ist,\ndass Listen auch Vektoren sind, nur eben ein besonderer Fall eines Vektors:\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-14_dbe7e88304e22ba2914cdff22358e03d'}\n\n```{.r .cell-code}\nis.vector(eine_liste)\n## [1] TRUE\n```\n:::\n\n\n\nWas passiert, wenn man bei einem Vektor der Länge 3 das 4. Element indiziert?\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-15_daaa0c46bd0faeab84b6b03cd991fca4'}\n\n```{.r .cell-code}\nein_vektor[4]\n## [1] NA\n```\n:::\n\n\nEin schnödes `NA` ist die Antwort. Das ist interessant: \nWir bekommen keine Fehlermeldung, sondern den Hinweis,\ndas angesprochene Element sei leer bzw. nicht verfügbar.\n\n\nIn @modar, Kap. 5.3.1 findet man weitere Indizierungsmöglichkeiten für reine Vektoren.\n\n\n\n#### Listen\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-16_d3ee732a4a2d109f47b5444f291cd8a9'}\n\n```{.r .cell-code}\neine_liste %>% str()\n## List of 5\n##  $ titel    : chr \"Einführung\"\n##  $ woche    : num 1\n##  $ datum    : chr [1:2] \"2022-03-14\" \"2202-03-21\"\n##  $ lernziele: chr [1:3] \"dies\" \"jenes\" \"und noch mehr\"\n##  $ lehre    : logi [1:3] TRUE TRUE TRUE\n```\n:::\n\n\n\nListen können wie Vektoren, also mit `[` ausgelesen werden. \nDann wird eine Liste zurückgegeben.\n\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-17_f88d7b30fa9cb29b07c78bf237b772b5'}\n\n```{.r .cell-code}\neine_liste[1]\n## $titel\n## [1] \"Einführung\"\neine_liste[2]\n## $woche\n## [1] 1\n```\n:::\n\n\nDas hat den technischen Hintergrund,\ndass Listen als eine bestimmte Art von Vektoren implementiert sind.\n\n\nMann kann auch die \"doppelte Eckklammer\", `[[` zum Auslesen verwenden;\ndann wird anstelle einer Liste die einfachere Struktur eines Vektors zurückgegeben:\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-18_beb63291bd622ba0a76d39cbcd71ac4d'}\n\n```{.r .cell-code}\neine_liste[[1]]\n## [1] \"Einführung\"\n```\n:::\n\n\nMan könnte sagen,\ndie \"äußere Schicht\" des Objekts, die Liste,\nwird abgeschält, und man bekommnt die \"innere\" Schicht,\nden Vektor.\n\n\nMann die Elemente der Liste entweder mit ihrer Positionsnummer (1, 2, ...) oder,\nsofern vorhanden, ihren Namen ansprechen:\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-19_fde5c917fe78cffbb25679b983305338'}\n\n```{.r .cell-code}\neine_liste[[\"titel\"]]\n## [1] \"Einführung\"\n```\n:::\n\n\n\nDann gibt es noch den Dollar-Operator,\nmit dem Mann benannte Elemente von Listen ansprechen kann:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-20_4792c292dd489c49bc729be922a82d7f'}\n\n```{.r .cell-code}\neine_liste$titel\n## [1] \"Einführung\"\n```\n:::\n\n\nMan kann auch tiefer in eine Liste hinein indizieren.\nSagen wir, uns interessiert das 4. Element der Liste `eine_liste` - \nund davon das erste Element. \n\nDas geht dann so:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-21_f97cabfaf9493609fbe75f6fdc141443'}\n\n```{.r .cell-code}\neine_liste[[4]][[1]] \n## [1] \"dies\"\n```\n:::\n\n\n\nEine einfachere Art des Indizierens von Listen bietet die Funktion `pluck()`, aus dem Paket `purrr`,\ndas Hilfen für den Umgang mit Listen bietet.\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-22_a267fee7b02547f733666de5d5dd006e'}\n\n```{.r .cell-code}\npluck(eine_liste, 4)\n## [1] \"dies\"          \"jenes\"         \"und noch mehr\"\n```\n:::\n\n\n\nUnd jetzt aus dem 4. Element das 1. Element:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-23_456798e609659a78b119d35e51b8bb75'}\n\n```{.r .cell-code}\npluck(eine_liste, 4, 1)\n## [1] \"dies\"\n```\n:::\n\n\n\nProbieren Sie mal, aus einer Liste der Länge 5 das 6. Element auszulesen:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-24_7e5b2b4084e6886b9f446939de7811f1'}\n\n```{.r .cell-code}\neine_liste %>% length()\n## [1] 5\n```\n:::\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-25_1256dd5263baf14501cb9094d0a18897'}\n\n```{.r .cell-code}\neine_liste[[6]]\n## Error in eine_liste[[6]]: subscript out of bounds\n```\n:::\n\n\nUnser Versuch wird mit einer Fehlermeldung quittiert.\n\n\nSprechen wir die Liste wie einen (atomaren) Vektor an,\nbekommen wir hingegen ein `NA` bzw. ein `NULL`:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-26_7dd4add40497929561e8e20031178a1d'}\n\n```{.r .cell-code}\neine_liste[6]\n## $<NA>\n## NULL\n```\n:::\n\n\n#### Tibbles\n\nTibbles lassen sich sowohl wie ein Vektor als auch wie eine Liste indizieren.\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-27_3618df4acf9e7f09508f2053e85ff574'}\n\n```{.r .cell-code}\nstudentis[1]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Anna\"},{\"1\":\"Berta\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nDie Indizierung eines Tibbles mit der einfachen Eckklammer liefert einen Tibble zurück.\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-28_2c1712f1c7764e58d170a4b604b5403d'}\n\n```{.r .cell-code}\nstudentis[\"name\"]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Anna\"},{\"1\":\"Berta\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\nMit doppelter Eckklammer bekommt man,\nanalog zur Liste, \neinen Vektor zurück:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-29_cc43ef0c2ccf52e817c66e0100c36e85'}\n\n```{.r .cell-code}\nstudentis[[\"name\"]]\n## [1] \"Anna\"  \"Berta\"\n```\n:::\n\n\nBeim Dollar-Operator kommt auch eine Liste zurück:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-30_7499987031fb5be629581f044601cd53'}\n\n```{.r .cell-code}\nstudentis$name\n## [1] \"Anna\"  \"Berta\"\n```\n:::\n\n\n\n### Weiterführende Hinweise\n\n- [Tutorial](https://jennybc.github.io/purrr-tutorial/bk00_vectors-and-lists.html) zum Themen Indizieren von Listen von Jenny BC.\n\n\n### Indizieren mit dem Tidyverse \n\nNatürlich kann man auch die Tidyverse-Verben zum Indizieren verwenden.\nDas bietet sich an, wenn zwei Bedingungen erfüllt sind:\n\n1. Wenn man einen Tibble als Input und als Output hat\n2. Wenn man nicht programmieren möchte\n\n\n\n## Datensätze von lang nach breit umformatieren\n\n\nManchmal findet man Datensätze im sog. *langen* Format vor,\nmanchmal im *breiten*.\n\nIn der Regel müssen die Daten \"tidy\" sein,\nwas meist dem langen Format entspricht, vgl.  @fig-langbreit aus @modar.\n\n\n![Von lang nach breit und zurück](img/gather_spread.png){#fig-langbreit}\n\n\n\nIn einer neueren Version des Tidyverse werden diese beiden Befehle umbenannt bzw. erweitert, s. @fig-pivot-anim.\n\n- `gather()` -> `pivot_longer()`\n- `spread()` -> `pivot_wider()`\n\n![Von \"weit\" zu \"breit\" und zurück, eine Animation](img/tidyr-pivoting.gif){#fig-pivot-anim width=\"50%\"}\n\n\nWeitere Informationen findet sich in @r4ds, in [diesem Abschnitt, 12.3](https://r4ds.had.co.nz/tidy-data.html?q=pivot_#pivoting).\n\n\n## Funktionen\n\nEine Funktion kann man sich als analog zu einer Variable vorstellen.\nEs ist ein Objekt, das nicht Daten, sondern Syntax beinhaltet, \nvgl.  @fig-funs aus @modar.\n\n![Sinnbild einer Funktion](img/Funs_def.png){#fig-funs}\n\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-31_7382fabb0e80b65f129188645a38e0d8'}\n\n```{.r .cell-code}\nmittelwert <- function(x){\n  \n  summe <- sum(x, na.rm = TRUE)\n  mw <- summe/length(x)\n  return(mw)\n  \n}\n```\n:::\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-32_5a9eebf606d23e5b3ebdcce07d4f2230'}\n\n```{.r .cell-code}\nmittelwert(c(1, 2, 3))\n## [1] 2\n```\n:::\n\n\n\n\nWeitere Informationen finden sich in [Kapitel 19](https://r4ds.had.co.nz/functions.html) in @r4ds. Alternativ findet sich ein Abschnitt dazu (28.1) in @modar.\n\n\n\n\n## Wiederholungen programmieren\n\nHäufig möchte man eine Operation mehrfach ausführen.\nEin Beispiel wäre die Anzahl der fehlenden Werte pro Spalte auslesen.\nNatürlich kann man die Abfrage einfach häufig tippen, nervt aber irgendwann.\nDaher braucht's Strukturen, die *Wiederholungen* beschreiben.\n\nDafür gibt es verschiedene Ansätze.\n\n### `across()`\n\nHandelt es sich um Spalten von Tibbles, dann bietet sich die Funktion `across(.col, .fns)` an.\n`across` wendet eine oder mehrere Funktionen (mit `.fns` bezeichnet) auf die Spalten `.col` an.\n\nDas erklärt sich am besten mit einem Beispiel:\n\n\nNatürlich hätte man in diesem Fall auch anders vorgehen können:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-33_24744c24b1bef793df0636f7b2a8b635'}\n\n```{.r .cell-code}\nmtcars %>% \n  summarise(across(.cols = everything(),\n                   .fns = mean))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"20.09062\",\"2\":\"6.1875\",\"3\":\"230.7219\",\"4\":\"146.6875\",\"5\":\"3.596563\",\"6\":\"3.21725\",\"7\":\"17.84875\",\"8\":\"0.4375\",\"9\":\"0.40625\",\"10\":\"3.6875\",\"11\":\"2.8125\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nMöchte man der Funktion `.fns` Parameter übergeben, so nutzt man diese Syntax (\"Purrr-Lambda\"):\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-34_6678ff03f630e225e97f423042ae542d'}\n\n```{.r .cell-code}\nmtcars %>% \n  summarise(across(.cols = everything(),\n                   .fns = ~ mean(., na.rm = TRUE)))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"20.09062\",\"2\":\"6.1875\",\"3\":\"230.7219\",\"4\":\"146.6875\",\"5\":\"3.596563\",\"6\":\"3.21725\",\"7\":\"17.84875\",\"8\":\"0.4375\",\"9\":\"0.40625\",\"10\":\"3.6875\",\"11\":\"2.8125\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n[Hier](https://www.rebeccabarter.com/blog/2020-07-09-across/) findet sich ein guter Überblick zu `across()`. \n\n\n\n### `map()`\n\n`map()` ist eine Funktion aus dem R-Paket `purrr` und Teil des Tidyverse.\n\n`map(x, f)` wenden die Funktion `f` auf jedes Element von `x` an.\nIst `x` ein Tibble, so wird `f` demnach auf jede Spalte von `x` angewendet (\"zugeordnet\", daher `map`), vgl.  @fig-map1 aus @modar.\n\n\n\n![Sinnbild für map aus purrr](img/wdh.png){#fig-map1 width=\"50%\"}\n\n\n\nHier ein Beispiel-Code:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-35_29b1a56ca14474a75bc1ba5c8a2fa5aa'}\n\n```{.r .cell-code}\ndata(mtcars)\n\nmtcars <- mtcars %>% select(1:3)  # nur die ersten 3 Spalten\n\nmap(mtcars, mean)\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n```\n:::\n\n\n\nMöchte man der gemappten Funktion Parameter übergeben,\nnutzt man wieder die \"Kringel-Schreibweise\":\n\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-36_5a0de2e07d43823136a408ae967e8146'}\n\n```{.r .cell-code}\nmap(mtcars, ~ mean(., na.rm = TRUE))\n## $mpg\n## [1] 20.09062\n## \n## $cyl\n## [1] 6.1875\n## \n## $disp\n## [1] 230.7219\n```\n:::\n\n\n\n### Weiterführende Hinweise\n\nWeiteres zu `map()` findet sich z.B. in @r4ds, [Kapitel 21.5](https://r4ds.had.co.nz/iteration.html#the-map-functions) oder in @modar, Kap. 28.2.\n\n[Tutorial](https://jennybc.github.io/purrr-tutorial/ls01_map-name-position-shortcuts.html) zu `map()` von Jenny BC.\n\n## Listenspalten\n\n\n### Wozu Listenspalten?\n\nListenspalten sind immer dann sinnvoll,\nwenn eine einfache Tabelle nicht komplex genug für unsere Daten ist.\n\nZwei Fälle stechen dabei ins Auge:\n\n1. Unsere Datenstruktur ist nicht rechteckig\n2. In einer Zelle der Tabelle soll mehr als ein einzelner Wert stehen: vielleicht ein Vektor, eine Liste oder eine Tabelle\n\n\nDer erstere Fall (nicht reckeckig) ließe sich noch einfach lösen,\nin dem man mit `NA` auffüllt.\n\nDer zweite Fall verlangt schlichtweg nach komplexeren Datenstrukturen.\n\n\n[Kap. 25.3](https://r4ds.had.co.nz/many-models.html?q=list#creating-list-columns) aus @r4ds bietet einen guten Einstieg in das Konzept von Listenspalten (list-columns) in R.\n\n\n### Beispiele für Listenspalten\n\n\n#### tidymodel\n\nWenn wir mit `tidymodels` arbeiten,\nwerden wir mit Listenspalten zu tun haben.\nDaher ist es praktisch, sich schon mal damit zu beschäftigen.\n\nHier ein Beispiel für eine $v=3$-fache Kreuzvalidierung:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-37_8468616f51089d44898d375ad247a29b'}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nmtcars_cv <-\n  vfold_cv(mtcars, v = 3)\n\nmtcars_cv\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"splits\"],\"name\":[1],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"id\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"<S3: vfold_split>\",\"2\":\"Fold1\"},{\"1\":\"<S3: vfold_split>\",\"2\":\"Fold2\"},{\"1\":\"<S3: vfold_split>\",\"2\":\"Fold3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nBetrachten wir das Objekt `mtcars_cv` näher.\nDie Musik spielt in der 1. Spalte.\n\nLesen wir den Inhalt der 1. Spalte, 1 Zeile aus (nennen wir das mal \"Position 1,1\"):\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-38_df47882de0e05e285e2ed58a1dd02db3'}\n\n```{.r .cell-code}\npos11 <- mtcars_cv[[1]][[1]]\npos11\n## <Analysis/Assess/Total>\n## <21/11/32>\n```\n:::\n\n\nIn dieser Zelle findet sich eine Aufteilung des Komplettdatensatzes in den Analyseteil (Analysis sample) und den Assessmentteil (Assessment Sample).\n\nSchauen wir jetzt in dieses Objekt näher an.\nDas können wir mit `str()` tun.\n`str()` zeigt uns die Strktur eines Objekts.\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-39_9bebee32d7cef6dc2abe4fcb7aacb45a'}\n\n```{.r .cell-code}\nstr(pos11)\n## List of 4\n##  $ data  :'data.frame':\t32 obs. of  3 variables:\n##   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n##   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...\n##   ..$ disp: num [1:32] 160 160 108 258 360 ...\n##  $ in_id : int [1:21] 1 5 7 8 9 12 13 15 17 18 ...\n##  $ out_id: logi NA\n##  $ id    : tibble [1 × 1] (S3: tbl_df/tbl/data.frame)\n##   ..$ id: chr \"Fold1\"\n##  - attr(*, \"class\")= chr [1:2] \"vfold_split\" \"rsplit\"\n```\n:::\n\n\nOh! `pos11` ist eine Liste, und zwar eine durchaus komplexe.\nWir müssen erkennen,\ndass in einer einzelnen Zelle dieses Dataframes viel mehr steht,\nals ein Skalar bzw. ein einzelnes, atomares Element.\n\nDamit handelt es sich bei Spalte 1 dieses Dataframes (`mtcars_cv`) also um eine Listenspalte.\n\n\nÜben wir uns noch etwas im Indizieren.\n\nSprechen wir in `pos11` das erste Element an (`data`) und davon das erste Element:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-40_757985c52a7f43a3afe67892960e05c6'}\n\n```{.r .cell-code}\npos11[[\"data\"]][[1]]\n##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n## [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n## [31] 15.0 21.4\n```\n:::\n\n\nWir haben hier die doppelten Eckklammern benutzt, \num den \"eigentlichen\" oder \"inneren\" Vektor zu bekommen, \nnicht die \"außen\" herumgewickelte Liste.\nZur Erinnerung: \nEin Dataframe ist ein Spezialfall einer Liste, \nalso auch eine Liste, nur eine mit bestimmten Eigenschaften.\n\nZum Vergleich indizieren wir mal mit einer einfachen Eckklammer:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-41_3e3b62d6eae98be947a36c3592a6bab2'}\n\n```{.r .cell-code}\npos11[[\"data\"]][1] %>% \n  head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"22.8\",\"_rn_\":\"Datsun 710\"},{\"1\":\"21.4\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.7\",\"_rn_\":\"Hornet Sportabout\"},{\"1\":\"18.1\",\"_rn_\":\"Valiant\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nMit `pluck()` bekommen wir das gleiche Ergebnis, \nnur etwas komfortabler,\nda wir keine Eckklammern tippen müssen:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-42_3beab996c8f624d571e188c100af57c3'}\n\n```{.r .cell-code}\npluck(pos11, \"data\", 1, 1)\n## [1] 21\n```\n:::\n\n\nWie man sieht, können wir beliebig tief in das Objekt hineinindizieren.\n\n\n\n\n\n### Programmieren mit dem Tidyverse\n\nDas Programmieren mit dem Tidyvers ist nicht ganz einfach und hier nicht näher ausgeführt.\nEine Einführung findet sich z.B. \n\n- [Tidyeval in fünf Minuten (Video)](https://www.youtube.com/watch?v=nERXS3ssntw)\n- In [Kapiteln 17-21 in Advanced R, 2nd Ed](https://adv-r.hadley.nz/)\n- Ein Überblicksdiagramm findet sich [hier](https://twitter.com/lapply/status/1493908215796535296/photo/1) [Quelle](https://twitter.com/lapply/status/1493908215796535296?t=P0SbLJAd0Yd97hYPzNMxMg&s=09).\n\n\n\n\n\n\n## R ist schwierig\n\nManche behaupten, R [sei ein Inferno](https://www.burns-stat.com/pages/Tutor/R_inferno.pdf).\n\nZum Glück gibt es auch aufmunternde Stimmen:\n\n\n::: {.cell hash='050-R-Vertiefung_cache/html/unnamed-chunk-43_c0f336d00fc2abbeb832caa8fbb9d58e'}\n\n```{.r .cell-code}\npraise::praise()\n## [1] \"You are prime!\"\n```\n:::\n\n\n\n\nHat jemand einen guten Rat für uns?\nVielleicht ist der häufigste Rate, dass man die [Dokumentation lesen solle](https://en.wikipedia.org/wiki/RTFM).\n\n\n\n\n## Aufgaben\n\n\n- [Fallstudie Flugverspätungen](https://data-se.netlify.app/2021/03/10/fallstudie-modellierung-von-flugversp%C3%A4tungen/)\n - [Fallstudie Getreideernte](https://juliasilge.com/blog/crop-yields/) \n\n\n\n<!-- # Vertiefung -->\n  \n  \n## Vertiefung\n\n\n- [Funktionale Programmierung mit R](https://albert-rapp.de/post/2021-09-16-similar-data-and-list-like-columns/)\n- [Lernen Sie Wiederholungsstrukturen mit ggplot](https://data-se.netlify.app/2021/02/06/plotting-multiple-plots-using-purrr-map-and-ggplot/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}