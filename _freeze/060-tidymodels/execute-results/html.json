{
  "hash": "ca4a3ccaf31bfff56f4e312ab914316c",
  "result": {
    "markdown": "# tidymodels\n\n\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-1_e0fe7833608b62355cd73972a6d19fc6'}\n\n:::\n\n\n\n\n\n## Lernsteuerung\n\n### Lernziele\n\n- Sie sind in der Lage, Regressionsmodelle mit dem tidymodels-Ansatz zu spezifizieren.\n- Sie können Begriffe des statistischen Lernens in das Vokabular von tidymodels übersetzen.\n\n\n\n##  Vorbereitung\n\n- Lesen Sie [TMWR, Kapitel 1](https://www.tmwr.org/software-modeling.html)\n- Lesen Sie übrige Literatur zu diesem Thema: TMWR, Kap. 1, 5, 6, 7, 8, 9\n\n\n### Benötigte R-Pakete\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-3_c53fc8e08afb3394c114506b50c9e5f2'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n`{tidymodels}` ist ein *Metapaket*: Ein (R-)Paket,\ndas mehrere andere Paket startet und uns damit das Leben einfacher macht, analog zu `tidyverse`.\nEine Liste der R-Pakete, die durch `tidymodels` gestartet werden,\nfindet sich [hier](https://www.tidymodels.org/packages/).\nProbieren Sie auch mal `?tidymodels`. \n\nEine Liste aller Pakete, die\nin Tidymodels benutzt werden, die `dependencies`,\nkann man sich so ausgeben lassen:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-4_8428365fa56dd9c0b32636bc62f86675'}\n\n```{.r .cell-code}\npkg_deps(x = \"tidymodels\", recursive = FALSE)\n```\n:::\n\n\n\n## Daten\n\nDieser Abschnitt bezieht sich auf [Kapitel 4](https://www.tmwr.org/ames.html) in @silge_tidy_2022.\n\n\n\n\nWir benutzen den Datensatz zu Immobilienpreise aus dem [Ames County](https://en.wikipedia.org/wiki/Ames,_Iowa) in Iowa, USA,\ngelegen im Zentrum des Landes.\n\n\n::: {.cell hash='060-tidymodels_cache/html/load-ames-data_96b418b131c6ad8b4811adbdc0a1b818'}\n\n```{.r .cell-code}\ndata(ames)  # Daten wurden über tidymodels mit geladen\names <- \n  ames %>% \n  mutate(Sale_Price = log10(Sale_Price))\n```\n:::\n\n\n\nHier wurde die AV log-transformiert.\nDas hat zwei (wichtige) Effekte:\n\n1. Die Verteilung ist symmetrischer, näher an der Normalverteilung. Damit gibt es mehr Daten im Hauptbereich des Ranges von `Sale_Price`, was die Vorhersagen stabiler machen dürfte.\n2. Logarithmiert man die Y-Variable, so kommt dies [einem multiplikativen Modell gleich](https://sebastiansauer.github.io/2021-sose/QuantMeth1/Vertiefung/Log-Log-Regression.html#19), s. auch [hier](https://data-se.netlify.app/2021/06/17/ein-beispiel-zum-nutzen-einer-log-transformation/).\n\n\n\n\n\n## Train- vs Test-Datensatz aufteilen\n\n\nDieser Abschnitt bezieht sich auf [Kapitel 5](https://www.tmwr.org/splitting.html) in @silge_tidy_2022.\n\n\n:::: {.callout-note}\nDas Aufteilen in Train- und Test-Datensatz ist einer der wesentlichen Grundsätze im maschinellen Lernen. Das Ziel ist, Overfitting abzuwenden.\nIm Train-Datensatz werden alle Modelle berechnet.\nDer Test-Datensatz wird nur *einmal* verwendet, und zwar zur Überprüfung der Modellgüte.\n:::\n\n<!-- [![](https://mermaid.ink/img/pako:eNo9jDEOwjAMRa9ieW4RYkKZ4QTt6MVqDERK0ip1KqGqd8e0Ak_fz-97xWH0gg6nIKBBo0BfOOQWlvkEvczadpymKJTBhnC_EoKD6_nPTNvRxRBlbDBJSRy8_V2_EqG-JAmhs-jlwTVagfJmap08q9x90LGg01KlQa46du88_PbDuQV-Fk4H3D5jVDy8)](https://mermaid.live/edit#pako:eNo9jDEOwjAMRa9ieW4RYkKZ4QTt6MVqDERK0ip1KqGqd8e0Ak_fz-97xWH0gg6nIKBBo0BfOOQWlvkEvczadpymKJTBhnC_EoKD6_nPTNvRxRBlbDBJSRy8_V2_EqG-JAmhs-jlwTVagfJmap08q9x90LGg01KlQa46du88_PbDuQV-Fk4H3D5jVDy8) -->\n\n<!-- [Quelle](https://gist.github.com/sebastiansauer/be53bfc193fd3c144a430b7d3b922310) -->\n\nEine Faustregel ist es, 70-80% der Daten in das Train-Sample\nund die übrigen 20-30% in das Test-Sample zu stecken, s. @fig-train-pie\n\n\n```{mermaid}\n%%| label: fig-train-pie\n%%| fig-cap: \"80-20-Aufteilung der Daten in Train- bzw. Test-Sample\"\npie title Train-Test-Aufteilung\n    \"Train\" : 80\n    \"Test\" : 19\n    \"The Unkown God\": 1\n```\n\n\n\n\nPraktisch funktioniert das in @silge_tidy_2022 wie folgt.\n\nWir laden die Daten und erstellen einen Index,\nder jeder Beobachtung die Zuteilung zu Train- bzw. zum Test-Datensatz zuweist.\n\nDas kann, mit `tidymodels` so aussehen:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-6_d511f42b7571deb7867862e6cfb2f3f0'}\n\n```{.r .cell-code}\names_split <- initial_split(ames, prop = 0.80, strata = Sale_Price)\n```\n:::\n\n\n`initial_split()` speichert für spätere komfortable Verwendung auch die Daten.\nAber eben auch der Index, der bestimmt, welche Beobachtung im Train-Set landet:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-7_3271a8b8d0ad97a7aac5a848b6d5bd70'}\n\n```{.r .cell-code}\names_split$in_id %>% head(n = 10)\n##  [1]  2 27 28 30 31 32 35 79 84 89\nlength(ames_split$in_id)\n## [1] 2342\n```\n:::\n\n\nPraktisch ist auch,\ndass die AV-Verteilung in beiden Datensätzen ähnlich gehalten wird (Stratifizierung),\ndas besorgt das Argument `strata`.\n\n\nDie eigentlich Aufteilung in die zwei Datensätze geht dann so:\n\n\n::: {.cell hash='060-tidymodels_cache/html/train-test-ames_1f5f4ef8fdff54dc015a19f75c23d5e9'}\n\n```{.r .cell-code}\names_train <- training(ames_split)\names_test  <-  testing(ames_split)\n```\n:::\n\n\n\n\n## Grundlagen der Modellierung mit tidymodels\n\nDieser Abschnitt bezieht sich auf [Kapitel 6](https://www.tmwr.org/models.html) in @silge_tidy_2022.\n\n\n\n\n`tidymodels` ist eine Sammlung mehrerer, zusammengehöriger Pakete,\neben zum Thema statistische Modellieren.\n\nDas kann man analog zur Sammlung `tidyverse` verstehen,\nzu der z.B. das R-Paket `dplyr` gehört.\n\n\nDas R-Paket innerhalb von `tidymodels`, das zum \"Fitten\" von Modellen zuständig ist, heißt [parsnip](https://parsnip.tidymodels.org/).\n\nEine Liste der verfügbaren Modelltypen, Modellimplementierungen und Modellparameter, die in Parsnip aktuell unterstützt werden, findet sich [hier](https://www.tidymodels.org/find/parsnip/).\n\n\n\n### Modelle spezifizieren\n\n\n\n\n\nEin (statistisches) Modell wird in Tidymodels mit drei Elementen spezifiziert, vgl. @fig-tidymodels-def.\n\n\n\n```{mermaid}\n%%| fig-cap: Definition eines Models in tidymodels\n%%| label: fig-tidymodels-def\nflowchart LR\n   \n  \n\n  subgraph Modus\n  r2[regresssion]\n  classification\n  end\n  \n  subgraph Implementierung\n  lm\n  stan_glm\n  div2[...]\n  end\n  \n  subgraph Algorithmus\n  R[Regression]\n  NN[Neuronale Netze]\n  div[...]\n  end \n  \n\n```\n\n\n\n\n\nDie Definition eines Modells in tidymodels folgt diesen Ideen:\n\n\n1. Das Modell sollte unabhängig von den Daten spezifiziert sein\n2. Das Modell sollte unabhängig von den Variablen (AV, UVs) spezifiziert sein\n3. Das Modell sollte unabhängig von etwaiger Vorverarbeitung (z.B. z-Transformation) spezifiziert sein\n\n\nDa bei einer linearen Regression nur der Modus \"Regression\" möglich ist,\nmuss der Modus in diesem Fall nicht angegeben werden.\nTidymodels erkennt das automatisch.\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-9_c6f0584896f0d5d39e9025685c022bd5'}\n\n```{.r .cell-code}\nlm_model <-   \n  linear_reg() %>%   # Algorithmus, Modelltyp\n  set_engine(\"lm\")  # Implementierung\n  # Modus hier nicht nötig, da lineare Modelle immer numerisch klassifizieren\n```\n:::\n\n\n\n### Modelle berechnen\n\n\nNach @rhys ist ein Modell sogar erst ein Modell,\nwenn die Koeffizienten berechnet sind.\nTidymodels kennt diese Unterscheidung nicht.\nStattdessen spricht man in Tidymodels von einem \"gefitteten\" Modell,\nsobald es berechnet ist.\nÄhnlich fancy könnte man von einem \"instantiierten\" Modell sprechen.\n\nFür das Beispiel der einfachen linearen Regression heißt das,\ndas Modell ist gefittet, \nsobald die Steigung und der Achsenabschnitt (sowie die Residualstreuung) \nberechnet sind.\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-10_bb9d4a82f55a35e82777a852b3833f45'}\n\n```{.r .cell-code}\nlm_form_fit <- \n  lm_model %>% \n  fit(Sale_Price ~ Longitude + Latitude, data = ames_train)\n```\n:::\n\n\n\n### Vorhersagen\n\nIm maschinellen Lernen ist man primär an den Vorhersagen interessiert,\nhäufig nur an Punktschätzungen.\nSchauen wir uns also zunächst diese an.\n\n\nVorhersagen bekommt man recht einfach mit der `predict()` Methode von tidymodels^[im Gegensatz zum `predict()` von `lm` mit Unterstrich bei `new_data`, also *nicht* `newdata`.]:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-11_dfdf76613c827eb38343564a4a31d6d7'}\n\n```{.r .cell-code}\npredict(lm_form_fit, new_data = ames_test) %>% \n  head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".pred\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"5.222288\"},{\"1\":\"5.275835\"},{\"1\":\"5.261732\"},{\"1\":\"5.263796\"},{\"1\":\"5.246467\"},{\"1\":\"5.251335\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nDie Syntax zum Vorhersagen lautet also: `predict(modell, daten_zum_vorhersagen)`.\n\n\n\n### Vorhersagen im Train-Datensatz\n\nVorhersagen im Train-Datensatz machen kaum Sinn,\nda sie nicht gegen Overfitting geschützt sind und daher deutlich zu optimistisch sein können.\n\nBei einer linearen Regression ist diese Gefahr nicht so hoch,\naber bei anderen, flexibleren Modellen, ist diese Gefahr absurd groß.\n\n\n### Modellkoeffizienten im Train-Datensatz\n\n\nGibt man den Namen des Modellobjekts ein,\nso wird ein Überblick an relevanten Modellergebnissen am Bildschirm gedruckt:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-12_492b28cee73cbeaab58abacf8ba12bb1'}\n\n```{.r .cell-code}\nlm_form_fit\n## parsnip model object\n## \n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##    -311.511       -2.109        2.836\n```\n:::\n\n\nInnerhalb des Ergebnisobjekts findet sich eine Liste namens `fit`,\nin der die Koeffizienten (der \"Fit\") abgelegt sind:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-13_12789ff6276a473791cc3b890e021dfd'}\n\n```{.r .cell-code}\nlm_form_fit %>% pluck(\"fit\")\n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##    -311.511       -2.109        2.836\n```\n:::\n\n\nZum Herausholen dieser Infos kann man auch alternativ die Funktion `extract_fit_engine()` verwenden:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-14_134e1e0738b53405f6c8451bfdce2657'}\n\n```{.r .cell-code}\nlm_fit <-\n  lm_form_fit %>% \n  extract_fit_engine()\n\nlm_fit\n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##    -311.511       -2.109        2.836\n```\n:::\n\n\n:::{.callout-note}\nMöchten Sie wissen, was sich in `lm_form_fit` alles verbirgt,\nbietet sich die Funktion `str` an. \nAlternativ können Sie in RStudio unter `Environment` das Objekt \"aufklappen\".\n:::\n\n\nDas extrahierte Objekt ist, in diesem Fall, \ndas typische `lm()` Objekt.\nEntsprechend kann man daruaf `coef()` oder `summary()` anwenden.\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-15_bafec50348595fe24d76ffc968262db3'}\n\n```{.r .cell-code}\ncoef(lm_fit)\n## (Intercept)   Longitude    Latitude \n## -311.510950   -2.109107    2.836443\nsummary(lm_fit)\n## \n## Call:\n## stats::lm(formula = Sale_Price ~ Longitude + Latitude, data = data)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -1.02571 -0.09581 -0.01513  0.09817  0.57768 \n## \n## Coefficients:\n##              Estimate Std. Error t value Pr(>|t|)    \n## (Intercept) -311.5110    14.5929  -21.35   <2e-16 ***\n## Longitude     -2.1091     0.1303  -16.18   <2e-16 ***\n## Latitude       2.8364     0.1800   15.75   <2e-16 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 0.1613 on 2339 degrees of freedom\n## Multiple R-squared:  0.1738,\tAdjusted R-squared:  0.1731 \n## F-statistic: 246.1 on 2 and 2339 DF,  p-value: < 2.2e-16\n```\n:::\n\n\nSchicker sind die Pendant-Befehle aus `broom`,\ndie jeweils einen Tibble zuückliefern:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-16_11b2714d22ee76ed1cc99f3ffd3e9ac1'}\n\n```{.r .cell-code}\nlibrary(broom)\ntidy(lm_fit) # Koeffizienten\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"term\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"estimate\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"std.error\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"(Intercept)\",\"2\":\"-311.510950\",\"3\":\"14.5929392\",\"4\":\"-21.34669\",\"5\":\"1.605174e-92\"},{\"1\":\"Longitude\",\"2\":\"-2.109107\",\"3\":\"0.1303369\",\"4\":\"-16.18196\",\"5\":\"6.555284e-56\"},{\"1\":\"Latitude\",\"2\":\"2.836443\",\"3\":\"0.1800464\",\"4\":\"15.75396\",\"5\":\"3.186767e-53\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nglance(lm_fit) # Modellgüte\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"r.squared\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"adj.r.squared\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sigma\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"statistic\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"p.value\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"df\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"logLik\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"AIC\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"BIC\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"deviance\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"df.residual\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"nobs\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.1738396\",\"2\":\"0.1731332\",\"3\":\"0.161262\",\"4\":\"246.0847\",\"5\":\"1.015766e-97\",\"6\":\"2\",\"7\":\"951.8531\",\"8\":\"-1895.706\",\"9\":\"-1872.671\",\"10\":\"60.82668\",\"11\":\"2339\",\"12\":\"2342\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nEine weitere Alternative sind die Befehle zur Modell-Performance von `easystats´^[Paket `performance`]:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-17_5cd4f3dfad0df0dfec3bef1e5e18c4f9'}\n\n```{.r .cell-code}\nlibrary(easystats)\nparameters(lm_form_fit)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Parameter\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"Coefficient\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"SE\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"CI\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"CI_low\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"CI_high\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"t\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"df_error\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"p\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"(Intercept)\",\"2\":\"-311.510950\",\"3\":\"14.5929392\",\"4\":\"0.95\",\"5\":\"-340.127393\",\"6\":\"-282.894507\",\"7\":\"-21.34669\",\"8\":\"2339\",\"9\":\"4.185542e-101\"},{\"1\":\"Longitude\",\"2\":\"-2.109107\",\"3\":\"0.1303369\",\"4\":\"0.95\",\"5\":\"-2.364695\",\"6\":\"-1.853519\",\"7\":\"-16.18196\",\"8\":\"2339\",\"9\":\"6.760260e-59\"},{\"1\":\"Latitude\",\"2\":\"2.836443\",\"3\":\"0.1800464\",\"4\":\"0.95\",\"5\":\"2.483376\",\"6\":\"3.189510\",\"7\":\"15.75396\",\"8\":\"2339\",\"9\":\"6.451526e-56\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nr2(lm_form_fit)\n## # R2 for Linear Regression\n##        R2: 0.174\n##   adj. R2: 0.173\nmae(lm_form_fit)\n## [1] 0.122687\n```\n:::\n\n\n\n### Parsnip RStudio add-in\n\nMit dem Add-in von Parsnip kann man sich eine Modellspezifikation per Klick ausgeben lassen. \nNett!\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-18_5461edc3fed63a2e765e8de15ff41e21'}\n\n```{.r .cell-code}\nparsnip_addin()\n```\n:::\n\n\n\n\n## Workflows\n\nDieser Abschnitt bezieht sich auf [Kapitel 7](https://www.tmwr.org/workflows.html) in @silge_tidy_2022.\n\n\n### Konzept des Workflows in Tidymodels\n\n\n::: {.cell hash='060-tidymodels_cache/html/tidymodels-workflow_f6043036379ae454ee4f3f7d227a247c'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-6aaa27a678daafba3ccf\" style=\"width:100%;height:500px;\" class=\"nomnoml html-widget \"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6aaa27a678daafba3ccf\">{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n\\n[Workflow|\\n  [preprocessing|\\n   Vorverarbeitung;\\n   Imputation;\\n   Transformation;\\n   Prädiktorwahl\\n   AV-Wahl\\n   ...\\n  \\n  ]\\n  [fitting |\\n    Modell berechnen\\n    ...\\n  ]\\n  [postprocessing|\\n    Grenzwerte für Klass. festlegen\\n    ...\\n  ]\\n]\\n\",\"svg\":false,\"png\":null},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\nDefinition eines Models in tidymodels\n:::\n:::\n\n\n\n### Einfaches Beispiel\n\nWir initialisieren einen Workflow,\nverzichten auf Vorverarbeitung und fügen ein Modell hinzu:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-19_1978bea147a7f89895b465b8454569b5'}\n\n```{.r .cell-code}\nlm_workflow <- \n  workflow() %>%  # init\n  add_model(lm_model) %>%   # Modell hinzufügen\n  add_formula(Sale_Price ~ Longitude + Latitude)  # Modellformel hinzufügen\n```\n:::\n\n\n\n\n\nWerfen wir einen Blick in das Workflow-Objekt:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-20_1d4c5ea6d69ecacee8bc0b2d5ec60b10'}\n\n```{.r .cell-code}\nlm_workflow\n## ══ Workflow ════════════════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ───────────────────────────────────────────────────────────────────────\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n```\n:::\n\n\nWie man sieht,\ngehört die *Modellformel* (`y ~ x`) zur Vorverarbeitung \naus Sicht von Tidymodels.\n\n\nWas war nochmal im Objekt `lm_model` enthalten?\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-21_caf385baf5ab2fa3cd304a4f5156285e'}\n\n```{.r .cell-code}\nlm_model\n## Linear Regression Model Specification (regression)\n## \n## Computational engine: lm\n```\n:::\n\n\n\nJetzt können wir das Modell berechnen (fitten):\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-22_6037ab4bba8455bc8ec8a6df642921d7'}\n\n```{.r .cell-code}\nlm_fit <- \n  lm_workflow %>%\n  fit(ames_train)\n```\n:::\n\n\nNatürlich kann man synonym auch schreiben:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-23_56b934da8dac87e9ffc770984234f2da'}\n\n```{.r .cell-code}\nlm_fit <- fit(lm_wflow, ames_train)\n```\n:::\n\n\n\nSchauen wir uns das Ergebnis an:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-24_5ff8934b79de07c40b1a7eadf28036fe'}\n\n```{.r .cell-code}\nlm_fit\n## ══ Workflow [trained] ══════════════════════════════════════════════════════════\n## Preprocessor: Formula\n## Model: linear_reg()\n## \n## ── Preprocessor ────────────────────────────────────────────────────────────────\n## Sale_Price ~ Longitude + Latitude\n## \n## ── Model ───────────────────────────────────────────────────────────────────────\n## \n## Call:\n## stats::lm(formula = ..y ~ ., data = data)\n## \n## Coefficients:\n## (Intercept)    Longitude     Latitude  \n##    -311.511       -2.109        2.836\n```\n:::\n\n\n\n### Vorhersage mit einem Workflow\n\nDie Vorhersage mit einem Tidymodels-Workflow ist einerseits komfortabel,\nda man einfach sagen kann:\n\n\"Nimm die richtigen Koeffizienten des Modells aus dem Train-Set\nund wende sie auf das Test-Sample an. Berechne mir\ndie Vorhersagen und die Modellgüte.\"\n\nSo sieht das aus:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-25_d8ae8afc5d1424996338d1b110e3dbd7'}\n\n```{.r .cell-code}\nfinal_lm_res <- last_fit(lm_workflow, ames_split)\nfinal_lm_res\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"splits\"],\"name\":[1],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"id\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".metrics\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".notes\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".predictions\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".workflow\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"<S3: initial_split>\",\"2\":\"train/test split\",\"3\":\"<tibble[,4]>\",\"4\":\"<tibble[,3]>\",\"5\":\"<tibble[,4]>\",\"6\":\"<S3: workflow>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAlso, `last_fit` kümmert sich um Folgendes:\n\n1. Berechne Modell im (kompletten) Train-Sample\n2. Sage Daten im Test-Sample vorher\n3. Berechne Modellgüte im Test-Sample\n\n\nEs wird  ein recht komplexes Objekt zurückgeliefert,\ndas man erst mal durchschauen muss.\n\nWie man sieht, gibt es mehrere Listenspalten in `final_lm_res`.\nBesonders interessant erscheinen natürlich die Listenspalten `.metrics` und `.predictions`.\n\nSchauen wir uns die Vorhersagen an.\nDiese finden sich im resultierenden Objekt von `last_fit`,\nzusammen mit anderen Informationen wie MOdellgüte.\nDie `.predictions` sind selber ein Tibble, wo in der ersten Spalte die \nVorhersagen stehen.\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-26_75b72efe4bb3690fe2c8cee944d41f9f'}\n\n```{.r .cell-code}\nlm_preds <- final_lm_res %>% pluck(\".predictions\", 1)\n```\n:::\n\n\nEs gibt auch eine Funktion, die obige Zeile vereinfacht (also synonym ist):\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-27_27b27dd18975786558fa8dda3dd3792a'}\n\n```{.r .cell-code}\nlm_preds <- collect_predictions(final_lm_res)\nlm_preds %>% slice_head(n = 5)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".pred\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".row\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"Sale_Price\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".config\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"train/test split\",\"2\":\"5.284108\",\"3\":\"7\",\"4\":\"5.329398\",\"5\":\"Preprocessor1_Model1\"},{\"1\":\"train/test split\",\"2\":\"5.280413\",\"3\":\"13\",\"4\":\"5.256237\",\"5\":\"Preprocessor1_Model1\"},{\"1\":\"train/test split\",\"2\":\"5.269243\",\"3\":\"14\",\"4\":\"5.234264\",\"5\":\"Preprocessor1_Model1\"},{\"1\":\"train/test split\",\"2\":\"5.271124\",\"3\":\"15\",\"4\":\"5.326336\",\"5\":\"Preprocessor1_Model1\"},{\"1\":\"train/test split\",\"2\":\"5.242593\",\"3\":\"19\",\"4\":\"5.149219\",\"5\":\"Preprocessor1_Model1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n### Modellgüte\n\n\nDieser Abschnitt bezieht sich auf [Kapitel 9](https://www.tmwr.org/performance.html) in @silge_tidy_2022.\n\n\n\nDie Vorhersagen bilden die Basis für die Modellgüte (\"Metriken\"),\ndie schon fertig berechnet im Objekt `final_lm_res` liegen und mit\n`collect_metrics` herausgenommen werden können:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-28_718b1db45ac7267dc5e57239c7e4d194'}\n\n```{.r .cell-code}\nlm_metrics <- collect_metrics(final_lm_res)\n```\n:::\n\n\nAlternativ kommt man mit `pluck(final_lm_res, \".metrics\")` an die gleichen Informationen.\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-29_22e05afeb601402af67c578a5f4e1c83'}\n::: {.cell-output-display}\n```{=html}\n<div id=\"kjhmeyfkkh\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>html {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n}\n\n#kjhmeyfkkh .gt_table {\n  display: table;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kjhmeyfkkh .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kjhmeyfkkh .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 0;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kjhmeyfkkh .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kjhmeyfkkh .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kjhmeyfkkh .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kjhmeyfkkh .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kjhmeyfkkh .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kjhmeyfkkh .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kjhmeyfkkh .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#kjhmeyfkkh .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kjhmeyfkkh .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kjhmeyfkkh .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kjhmeyfkkh .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kjhmeyfkkh .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kjhmeyfkkh .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kjhmeyfkkh .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kjhmeyfkkh .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kjhmeyfkkh .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kjhmeyfkkh .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#kjhmeyfkkh .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kjhmeyfkkh .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kjhmeyfkkh .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kjhmeyfkkh .gt_left {\n  text-align: left;\n}\n\n#kjhmeyfkkh .gt_center {\n  text-align: center;\n}\n\n#kjhmeyfkkh .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kjhmeyfkkh .gt_font_normal {\n  font-weight: normal;\n}\n\n#kjhmeyfkkh .gt_font_bold {\n  font-weight: bold;\n}\n\n#kjhmeyfkkh .gt_font_italic {\n  font-style: italic;\n}\n\n#kjhmeyfkkh .gt_super {\n  font-size: 65%;\n}\n\n#kjhmeyfkkh .gt_footnote_marks {\n  font-style: italic;\n  font-weight: normal;\n  font-size: 75%;\n  vertical-align: 0.4em;\n}\n\n#kjhmeyfkkh .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kjhmeyfkkh .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kjhmeyfkkh .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kjhmeyfkkh .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kjhmeyfkkh .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kjhmeyfkkh .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\">\n  \n  <thead class=\"gt_col_headings\">\n    <tr>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".metric\">.metric</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".estimator\">.estimator</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".estimate\">.estimate</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".config\">.config</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\".metric\" class=\"gt_row gt_left\">rmse</td>\n<td headers=\".estimator\" class=\"gt_row gt_left\">standard</td>\n<td headers=\".estimate\" class=\"gt_row gt_right\">1.62 × 10<sup style='font-size: 65%;'>−1</sup></td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td></tr>\n    <tr><td headers=\".metric\" class=\"gt_row gt_left\">rsq</td>\n<td headers=\".estimator\" class=\"gt_row gt_left\">standard</td>\n<td headers=\".estimate\" class=\"gt_row gt_right\">1.44 × 10<sup style='font-size: 65%;'>−1</sup></td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\nMan kann auch angeben, \nwelche Metriken der Modellgüte man bekommen möchte:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-30_404c2aaeb3cd68beab4b3fc22568899d'}\n\n```{.r .cell-code}\names_metrics <- metric_set(rmse, rsq)\n\names_metrics(data = lm_preds, \n             truth = Sale_Price, \n             estimate = .pred)\n```\n:::\n\n\n\n\n### Vorhersage von Hand\n\n\nMan kann sich die Metriken auch von Hand ausgeben lassen,\nwenn man direktere Kontrolle haben möchte als mit `last_fit` und `collect_metrics`.\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-31_441e4282a4d5d5fb974d7e70956e4f84'}\n\n```{.r .cell-code}\names_test_small <- ames_test %>% slice(1:5)\npredict(lm_form_fit, new_data = ames_test_small)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".pred\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"5.222288\"},{\"1\":\"5.275835\"},{\"1\":\"5.261732\"},{\"1\":\"5.263796\"},{\"1\":\"5.246467\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nJetzt binden wir die Spalten zusammen, also die \"Wahrheit\" ($y$, die beobachteten, tatsächlichen Y-Werte) und die Vorhersagen ($\\hat{y}$):\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-32_79235cc00037d025e7953ccfc878d116'}\n\n```{.r .cell-code}\names_test_small2 <- \n  ames_test_small %>% \n  select(Sale_Price) %>% \n  bind_cols(predict(lm_form_fit, ames_test_small)) %>% \n  # Add 95% prediction intervals to the results:\n  bind_cols(predict(lm_form_fit, ames_test_small, type = \"pred_int\")) \n```\n:::\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-33_247f6bb0ce73f7ed185da6df22437496'}\n\n```{.r .cell-code}\nrsq(ames_test_small2, \n   truth = Sale_Price,\n   estimate = .pred\n   )\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"0.07016134\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAndere Koeffizienten der Modellgüte können mit `rmse` oder `mae`^[Achtung: Die Funktion `mae` gibt es sowohl in tidymodels auch in easystats, hier kann es zu Konflikten kommen.] abgerufen werden.\n\n\n## Rezepte zur Vorverarbeitung\n\n\nDieser Abschnitt bezieht sich auf [Kapitel 8](https://www.tmwr.org/recipes.html) in @silge_tidy_2022.\n\n### Was ist Rezept und wozu ist es gut?\n\nSo könnte ein typischer Aufruf von `lm()` aussehen:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-34_38dd5680b9be7f30c5df42a7f67531d6'}\n\n```{.r .cell-code}\nlm(Sale_Price ~ Neighborhood + log10(Gr_Liv_Area) + Year_Built + Bldg_Type, \n   data = ames)\n```\n:::\n\n\nNeben dem Fitten des Modells besorgt die Formel-Schreibweise noch einige zusätzliche nützliche Vorarbeitung:\n\n\n1. Definition von AV und AV\n2. Log-Transformation von `Gr_Liv_Area`\n3. Transformation der nominalen Variablen in Dummy-Variablen\n\n\nDas ist schön und nützlich, hat aber auch Nachteile:\n\n\n1. Das Modell wird nicht nur spezifiziert, sondern auch gleich berechnet. Das ist unpraktisch, weil man die Modellformel vielleicht in anderen Modell wiederverwenden möchte. Außerdem kann das Berechnen lange dauern.\n2. Die Schritte sind ineinander vermengt, so dass man nicht einfach und übersichtlich die einzelnen Schritte bearbeiten kann.\n\n\nPraktischer wäre also, die Schritte der Vorverarbeitung zu ent-flechten.\nDas geht mit einem \"Rezept\" aus Tidymodels:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-35_ce584763586a67db49c631edd5cca25c'}\n\n```{.r .cell-code}\nsimple_ames <- \n  recipe(Sale_Price ~ Neighborhood + Gr_Liv_Area + Year_Built + Bldg_Type,\n         data = ames_train) %>%\n  step_log(Gr_Liv_Area, base = 10) %>% \n  step_dummy(all_nominal_predictors())\nsimple_ames\n## Recipe\n## \n## Inputs:\n## \n##       role #variables\n##    outcome          1\n##  predictor          4\n## \n## Operations:\n## \n## Log transformation on Gr_Liv_Area\n## Dummy variables from all_nominal_predictors()\n```\n:::\n\n\n\n:::: {.callout-note}\nEin Rezept berechnet kein Modell. Es macht nichts außer die Vorverarbeitung des Modells zu spezifizieren (inklusive der Modellformel).\n:::\n\n\n\n### Workflows mit Rezepten\n\nJetzt definieren wir den Workflow nicht nur mit einer Modellformel,\nsondern mit einem Rezept:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-36_e5364e4c078befd4c2303d9da5c9cc5b'}\n\n```{.r .cell-code}\nlm_workflow <-\n  workflow() %>% \n  add_model(lm_model) %>% \n  add_recipe(simple_ames)\n```\n:::\n\n\n\nSonst hat sich nichts geändert.\n\n\n\nWie vorher, können wir jetzt das Modell berechnen und uns im Test-Set die Vorhersagen berechnen lassen:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-37_b37ceae6e57e2ed7d55d2049f20911c3'}\n\n```{.r .cell-code}\nfinal_lm_res <- last_fit(lm_workflow, ames_split)\nfinal_lm_res\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"splits\"],\"name\":[1],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"id\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".metrics\"],\"name\":[3],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".notes\"],\"name\":[4],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".predictions\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\".workflow\"],\"name\":[6],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"<S3: initial_split>\",\"2\":\"train/test split\",\"3\":\"<tibble[,4]>\",\"4\":\"<tibble[,3]>\",\"5\":\"<tibble[,4]>\",\"6\":\"<S3: workflow>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nHier ist die Modellgüte:\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-38_a452a1432f971f227cdfe5e4f90ea6a0'}\n\n```{.r .cell-code}\nlm_metrics <- collect_metrics(final_lm_res)\nlm_metrics\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".metric\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimator\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\".estimate\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\".config\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"rmse\",\"2\":\"standard\",\"3\":\"0.0788150\",\"4\":\"Preprocessor1_Model1\"},{\"1\":\"rsq\",\"2\":\"standard\",\"3\":\"0.7978266\",\"4\":\"Preprocessor1_Model1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n### Spaltenrollen\n\nEine praktische Funktion ist es, \nbestimmte Spalten nicht als Prädiktor,\nsondern als ID-Variable zu nutzen.\nDas kann man in Tidymodels komfortabel wie folgt angeben:\n\n\n\n::: {.cell hash='060-tidymodels_cache/html/unnamed-chunk-39_a89c0b81826c8a9ef26fb1b16584046a'}\n\n```{.r .cell-code}\names_recipe <-\n  simple_ames %>% \n  update_role(Neighborhood, new_role = \"id\")\n\names_recipe\n## Recipe\n## \n## Inputs:\n## \n##       role #variables\n##         id          1\n##    outcome          1\n##  predictor          3\n## \n## Operations:\n## \n## Log transformation on Gr_Liv_Area\n## Dummy variables from all_nominal_predictors()\n```\n:::\n\n\n### Fazit\n\nMehr zu Rezepten findet sich [hier](https://recipes.tidymodels.org/).\nEin Überblick zu allen Schritten der Vorverarbeitung findet sich [hier](https://www.tidymodels.org/find/recipes/).\n\n\n## Aufgaben\n\n1. [tidymodels-ames-01](https://datenwerk.netlify.app/posts/tidymodels-ames-01/tidymodels-ames-01.html)\n2. [tidymodels-ames-02](https://datenwerk.netlify.app/posts/tidymodels-ames-02/tidymodels-ames-02.html)\n2. [tidymodels-ames-03](https://datenwerk.netlify.app/posts/tidymodels-ames-03/tidymodels-ames-03.html)\n2. [tidymodels-ames-04](https://datenwerk.netlify.app/posts/tidymodels-ames-04/tidymodels-ames-04.html)\n5. [bike01](https://datenwerk.netlify.app/posts/bike01/bike01.html)\n\n\n\n## Fallstudien \n\n\n\n- [Fallstudie Seegurken](https://www.tidymodels.org/start/models/)\n- [Sehr einfache Fallstudie zur Modellierung einer Regression mit tidymodels](https://juliasilge.com/blog/student-debt/)\n- [Fallstudie zur linearen Regression mit Tidymodels](https://www.gmudatamining.com/lesson-10-r-tutorial.html)\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\n<script src=\"site_libs/es6shim-0.35.6/es6shim.js\"></script>\n<script src=\"site_libs/es7shim-6.0.0/es7shim.js\"></script>\n<script src=\"site_libs/graphre-0.1.3/graphre.js\"></script>\n<script src=\"site_libs/nomnoml-1.5.3/nomnoml.js\"></script>\n<script src=\"site_libs/nomnoml-binding-0.2.6/nomnoml.js\"></script>\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}