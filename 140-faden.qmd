
# Der rote Faden




## Lernsteuerung

### √úberblick

Mittlerweile haben wir einiges zum Thema Data Science bzw. maschinelles Lernen behandelt (und sie hoffentlich viel gelernt).

Da ist es an der Zeit, einen Schritt zur√ºck zu treten,
um sich einen √úberblick √ºber den gegangenen Weg zu verschaffen,
den ber√ºhmten "roten Faden" zu sehen, den zur√ºckgelegten Weg nachzuzeichnen 
in den groben Linien, um einen (klareren) √úberblick √ºber das Terrain zu bekommen.

In diesem Kapitel werden wir verschiedene "Aussichtspfade" suchen, um im Bild zu bleiben,
die uns einen √úberblick √ºber das Gel√§nde versprechen.

###  Lernziele
- Sie erarbeiten sich einen √úberblick √ºber den bisher gelernten Stoff bzw. verfeinern Ihren bestehenden √úberblick


### Literatur

- Rhys im √úberblick




### R-Pakete und Daten


In diesem Kapitel werden folgende R-Pakete ben√∂tigt:

```{r echo = TRUE}
library(tidymodels)
library(tictoc)  # Zeitmessung
```






## Aussichtspunkt 1: Blick vom hohen Berg


Und so zeigt sich ein "Flussbild"^[Wem das Bild zu klein gezeichnet ist, der nehme entweder eine Lupe oder √∂ffne das Bild per Rechtsklick in einem neuen Tab.] (@fig-fluss).



```{mermaid}
%%| label: fig-fluss
%%| fig-cap: Ein Flussbild des maschinellen Lernens

flowchart LR
  Vv[Vorverarbeitung] --> W[Workflow]
  MF[Modellformel] --> W[Workflow]
  Mo[Modell] --> W[Workflow]
  Al[Algorithmus] --> Mo
  Im[Implementierung] --> Mo
  Mod[Modus] --> Mo
  St[z.B. Standardisierung] --> Vv
  FW[z.B. Fehlende Werte] --> Vv
  W -- f√ºr jeden Workflow --> Tuning
  subgraph Tuning
subgraph Resampling
  subgraph Fitten
  end
end
  end
  Tuning --> bM[bester Modellkandidat]
  bM --> FT[Fitten auf ganz Train-Sample]
  FT --> PT[Predict auf Test-Sample]
  PT -->  MG[Modellg√ºte]
  MG --> num[numerisch]
  MG --> klas[klassifikatorisch]

```








Der Reisef√ºhrer erz√§hlt uns zu diesem Bild folgende Geschichte:


{{< video https://www.youtube.com/embed/PO-UrF5hGtY >}}


<!-- <iframe width="560" height="315" src="https://www.youtube.com/embed/PO-UrF5hGtY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe> -->

[Video-Geschichte](https://youtu.be/PO-UrF5hGtY)

## Aussichtspunkt 2: Blick in den Hof der Handwerker

Wenn man auf einem hohen Berg gestanden ist, hat man zwar einen guten √úberblick √ºber das Land bekommen,
aber das konkrete Tun bleibt auf solchen H√∂hen verborgen.

M√∂chte man wissen, wie das gesch√§ftige Leben abl√§uft, muss man also den t√§tigen Menschen √ºber die Schulter schauen.
Werfen wir also einen Blick in den "Hof der Handwerker",
wo grundlegende Werkst√ºcke gefertigt werden,
und wir jeden Handgriff aus der N√§he mitverfolgen k√∂nnen.



### Ein maximale einfaches Werkst√ºck mit Tidymodels

Weniger blumig ausgedr√ºckt: Schauen wir uns ein maximal einfaches Beispiel an,
wie man mit Tidymodels Vorhersagen t√§tigt.
Genauer gesagt bearbeiten wir [einen sehr einfachen Ansatz](https://www.kaggle.com/code/ssauer/simple-linear-model-tidymodels) f√ºr einen Kaggle-Prognosewettbewerb.



<iframe width="560" height="315" src="https://www.youtube.com/embed/QHbIONGgMrA" frameborder="0" allowfullscreen></iframe>



### Ein immer noch recht einfaches Werkst√ºck mit Tidymodels

Dieses Beispiel ist nur wenig aufw√§ndiger als das vorherige.


<iframe width="560" height="315" src="https://www.youtube.com/embed/QS94JTMpnHc" frameborder="0" allowfullscreen></iframe>




## Aussichtspunkt 3: Der Nebelberg (Quiz)

Da der "Nebelberg" zumeist in Wolken verh√ºllt ist, muss man, wenn man ihn ersteigt und ins Land hinunterschaut,
erraten, welche Teile zu sehen sind. Sozusagen eine Art Landschafts-Quiz.

Voil√†, hier ist es, das *Quiz* zum maschinellen Lernen:

<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSdw9ngLAcs7VMaF5P-nRSS8zCBjLdJyPYXsGTzy1ERmD6oPcQ/viewform?embedded=true" width="640" height="930" frameborder="0" marginheight="0" marginwidth="0">Loading‚Ä¶</iframe>





## Aussichtspunkt 4: Der Exerzitien-Park

Wir stehen vor dem Eingang zu einem Park,
in dem sich viele Menschen an merkw√ºrdigen √úbungen, Exerzitien, beflei√üigen.
Vielleicht wollen Sie sich auch an einigen √úbungen abh√§rten? Bitte sch√∂n,
lassen Sie sich nicht von mir aufhalten.


```{r yacsdas, results='asis', echo = FALSE}
url <- "https://raw.githubusercontent.com/sebastiansauer/Lehre/main/Material/yacsdas.md"
childtext <- readLines(url)
cat(childtext, sep="\n")
```



## Aussichtspunkt 5: In der Bibliothek


Einen √úberblick √ºber eine Landschaft gewinnt man nicht nur von ausgesetzten Wegpunkten aus,
sondern auch, manchmal, aus Schriftst√ºcken.
Hier ist eine Auswahl an Literatur,
die Grundlagen zu unserem Landstrich erl√§utert.


- @rhys
- @silge_tidy_2022


Etwas weiter leiten uns diese Erz√§hler:

- @islr
- @kuhn



## Krafttraining

Um die Aussicht genie√üen zu k√∂nnen, muss man manchmal ausgesetzte Pl√§tze 
in ~~schwindelerregenden~~ ~~einigerma√üen steilen~~ als H√ºgel erkennbaren H√∂hen erreichen...

Sportliche Leistungen erreicht nur, wer trainiert ist.
Das ist im Land des Data Science nicht anders.

Hier ist eine Liste von √úbungen, die Ihre Datenkraft st√§hlen soll:

1. *Lerngruppe*: Den Wert einer Lerngruppe kann man kaum untersch√§tzen. Die Motivation, der Austausch, der Zwang seine Gedanken geordnet darzustellen, das wechselseitige Abfragen - diese Dinge machen eine Lerngruppe zu einem der wichtigsten Erfolgsgarant in Ihren Lernbem√ºhungen.
2. *Exzerpte*: Exzerpte, Zusammenfassungen also, sind n√∂tig, um von einer vermeintlichen "Jaja, easy, versthe ich alles" Oberfl√§chen-Verarbeitung zu einem (ausgepr√§gterem) Tiefenverst√§ndnis vorzudringen.
3. *Aufgaben*: Manchmal stellt ein Dozent Aufgaben ein. Die Chance sollte man nutzen, denn zwar ist vieles in der Didaktikforschung noch unsicher, aber dass Aufgaben l√∂sen beim Lernen hilft, und zwar viel, ist eines der wenigen unstrittigen Erkenntnisse.
4. *Fallstudien*: √Ñhnliches wie Aufgaben, die oft kleinteilig-akademisch angelegt sind, hilft die gro√üe Schwester der schn√∂den Aufgabe, die Fallstudie, beim Vordringen in Verst√§ndnistiefen.
5. *Lesen*: Ja, Lesen ist voll Old School. Aber so was √Ñhnliches wie Updaten der Brain-Software. N√ºtzlich, weil die alte Software irgendwann nicht mehr supported wird.
6. *Forum*: Sie haben eine Frage, aber Sie k√∂nnen unm√∂glich ein paar Tage warten, bis Sie den Dozenten im Unterricht sprechen? Posten Sie die Frage in einem Forum! Vielleicht im Forum des Moduls oder aber in einem geeigneten Forum im Internet.
7. *Youtube*: Zwar wettern Dozentis gerne √ºber die mangelnde Verarbeitungstiefe beim Fern schauen. Au√üerdem sind Lehrvideos didaktisch echt asbachuralt. Aber okay, manchmal und in √ºberschaubarer Dosis ist ein Lehrvideo eine n√ºtzliche Erg√§nzung zu den √ºbrigen Ma√ünahmen.





<!-- ## Aufgaben und Vertiefung -->

## Ressourcen

### Aufgaben

Im [Datenwerk](https://datenwerk.netlify.app/) unter dem Tag [stat-learning](https://datenwerk.netlify.app/#category=stat-learning) und [tidymodels](https://datenwerk.netlify.app/#category=tidymodels) finden Sie einen Fundus an Aufgaben zur pr√§diktiven Modellierung.


### Kaggle-Fallstudien 

In @sec-yacsdas-tidymodels finden Sie eine Fallstudien-Sammlung.

 
- [Einfache Random-Forest-Modellierung bei Kaggle (TMDB)](https://www.kaggle.com/code/ssauer/simple-rf-tuned)
- [Einfache Workflow-Set-Modellierung bei Kaggle (TMDB)](https://www.kaggle.com/code/ssauer/tmdb-xgboost-tidymodels)
- Bearbeiten Sie so viele Fallstudien der Fallstudiensammlung wie n√∂tig, um den Stoff fl√ºssig zu beherrschen



### Blaupausen (Template) via `usemodel`

Eine M√∂glichkeit, sich die Syntax f√ºr eine typische Tidymodels-Analyse ausgeben zu lassen, bietet das Paket `{usemodels}`.

Lassen wir uns einen Code-Schnipsel ausgeben f√ºr ein Random-Forest-Modell mit dem Engine `ranger`:


```{r}
library(usemodels)
use_ranger(am ~ ., data = mtcars)
```




### Blaupause: Code-Schnipsel f√ºr `tidymodels`




```{r eval = FALSE}
# Setup:
library(tidymodels)
library(tidyverse)
library(tictoc)  # Zeitmessung
library(<other_package_you_might_need_for_modelling>)  # tidymodels uses existing packages for modelling so you need to make them available


# Data:
d_path <- "Enter data path here"
d <- read_csv(d_path)

set.seed(42)
d_split <- initial_split(d)
d_train <- training(d_split)
d_test <- testing(d_split)


# model:
mod1 <-
  <enter_parsnip_model_name_here>(mode = "<choose_regression_or_classification>",
           cost_complexity = tune())


# cv:
set.seed(42)
rsmpl <- vfold_cv(d_train)


# recipe:
rec1 <- recipe(<enter_output_variable> ~  ., data = d_train)


# workflow:
wf1 <-
  workflow() %>% 
  add_model(mod1) %>% 
  add_recipe(rec1)


# tuning:
tic()
wf1_fit <-
  wf1 %>% 
  tune_grid(
    resamples = rsmpl)
toc()

# best candidate:
show_best(wf1_fit)


# finalize wf:
wf1_final <-
  wf1 %>% 
  finalize_workflow(select_best(wf1_fit))


wf1_fit_final <-
  wf1_final %>% 
  last_fit(d_split)


# Modellg√ºte im Test-Set:
collect_metrics(wf1_fit_final)
```



Tipp: Copy-Paste me üòÑ


Auch [hier auf dem Datenwerk](https://datenwerk.netlify.app/posts/tidymodels-vorlage/tidymodels-vorlage.html) finden Sie √§hnliche Vorlagen.




##  Vertiefung

- [Mathematische Grundlagen k√∂nnen Sie z.B. hier vertiefen](https://deisenroth.cc/publication/deisenroth-2020/)
- [Gute Fallstudie bei Kaggle f√ºr Regressionsprobleme: House Prices](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques)
- [Sie m√∂chten schnell ein Code-Schnipsel (√∂ffentlich sichtbar) teilen? Probieren Sie Github Gists aus](https://gist.github.com/)
- If in doubt, scream and shout ... and ask [ChatGPT](https://chat.openai.com/auth/login): ChatGPT kann Ihnen Code-Schnipsel erstellen, wenn Sie ihn nach einer bestimmten Aufgabenstellung fragen.   









