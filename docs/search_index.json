[["logistische-regression-1.html", "Kapitel 11 Logistische Regression 11.1 Intuitive Erkl√§rung 11.2 Profil 11.3 Warum nicht die lineare Regression verwenden? 11.4 Der Logit-Link 11.5 Aber warum? 11.6 m83, glm 11.7 Inverser Logit 11.8 Vom Logit zur Klasse 11.9 Logit und Inverser Logit 11.10 Logistische Regression im √úberblick", " Kapitel 11 Logistische Regression Ben√∂tigte R-Pakete f√ºr dieses Kapitel: library(tidyverse) library(tidymodels) library(datawizard) 11.1 Intuitive Erkl√§rung Die logistische Reression ist ein Spezialfall des linearen Modells (lineare Regression), der f√ºr bin√§re (dichotom) AV eingesetzt wird (es gibt auch eine Variante f√ºr multinominale AV). Es k√∂nnen eine oder mehrere UV in eine logistische Regression einflie√üen, mit beliebigem Skalenniveau. Beispiele f√ºr Forschungsfragen, die mit der logistischen Regression modelliert werden sind: Welche Faktoren sind pr√§diktiv, um vorherzusagen, ob jemand einen Kredit zur√ºckzahlen kann oder nicht? Haben weibliche Passagiere aus der 1. Klasse eine h√∂here √úberlebenschance als andere Personen auf der Titanic? Welche Faktoren h√§ngen damit zusammen, ob ein Kunde eine Webseite verl√§sst, bevor er einen Kauf abschlie√üt? Der Name stammt von der logistischen Funktion, die man in der einfachsten Form so darstellen kann: \\[f(x) = \\frac{x}{1+e^{-x}}\\] Da die AV als dichotom modelliert wird, spricht man von einer Klassifikation. Allerdings ist das Modell reichhaltiger als eine blo√üe Klassifikation, die (im bin√§ren Fall) nur 1 Bit Information liefert: ‚Äúja‚Äù vs.¬†‚Äúnein‚Äù bzw. 0 vs.¬†1. Das Modell liefert n√§mlich nicht nur eine Klassifikation zur√ºck, sondern auch eine Indikation der St√§rke (epistemologisch) der Klassenzugeh√∂rigkeit. Einfach gesagt hei√üt das, dass die logistische Regression eine Wahrscheinlichkeit der Klassenzugeh√∂rigkeit zur√ºckliefert. Figure 11.1: Definition eines Models in tidymodels 11.2 Profil Das Profil des Modells kann man wie folgt charakterisieren, vgl. Tab. 11.1. html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ixezeynxow .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ixezeynxow .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixezeynxow .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ixezeynxow .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #ixezeynxow .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixezeynxow .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ixezeynxow .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ixezeynxow .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ixezeynxow .gt_column_spanner_outer:first-child { padding-left: 0; } #ixezeynxow .gt_column_spanner_outer:last-child { padding-right: 0; } #ixezeynxow .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ixezeynxow .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ixezeynxow .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ixezeynxow .gt_from_md > :first-child { margin-top: 0; } #ixezeynxow .gt_from_md > :last-child { margin-bottom: 0; } #ixezeynxow .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ixezeynxow .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ixezeynxow .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixezeynxow .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ixezeynxow .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ixezeynxow .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ixezeynxow .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ixezeynxow .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ixezeynxow .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixezeynxow .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ixezeynxow .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ixezeynxow .gt_sourcenote { font-size: 90%; padding: 4px; } #ixezeynxow .gt_left { text-align: left; } #ixezeynxow .gt_center { text-align: center; } #ixezeynxow .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ixezeynxow .gt_font_normal { font-weight: normal; } #ixezeynxow .gt_font_bold { font-weight: bold; } #ixezeynxow .gt_font_italic { font-style: italic; } #ixezeynxow .gt_super { font-size: 65%; } #ixezeynxow .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } Table 11.1: Profil der logistischen Regression Merkmal Logistische Regression Klassifikation ja Regression nein Lerntyp √ºberwacht parametrisch ja 11.3 Warum nicht die lineare Regression verwenden? Forschungsfrage: Kann man anhand des Spritverbrauchs vorhersagen, ob ein Auto eine Automatik- bzw. ein manuelle Schaltung hat? Anders gesagt: H√§ngen Spritverbrauch und Getriebeart? (Datensatz mtcars) data(mtcars) d &lt;- mtcars %&gt;% mutate(mpg_z = standardize(mpg), iv = mpg_z, dv = am) m81 &lt;- lm(dv ~ iv, data = d) coef(m81) ## (Intercept) iv ## 0.4062500 0.2993109 \\(Pr(\\text{am}=1|m91,\\text{mpg_z}=0) = 0.46\\): Die Wahrscheinlichkeit einer manuelle Schaltung, gegeben einem durchschnittlichen Verbrauch (und dem Modell m81) liegt bei knapp 50%. 11.3.1 Lineare Modelle running wild Wie gro√ü ist die Wahrscheinlichkeit f√ºr eine manuelle Schaltung ‚Ä¶ ‚Ä¶ bei mpg_z = -2? predict(m81, newdata = data.frame(iv = -2)) ## 1 ## -0.1923719 \\(Pr(\\hat{y})&lt;0\\) macht keinen Sinn. ‚ö° ‚Ä¶ bei mpg_z = +2? predict(m81, newdata = data.frame(iv = +2)) ## 1 ## 1.004872 \\(Pr(\\hat{y})&gt;1\\) macht keinen Sinn. ‚ö° Schauen Sie sich mal die Vorhersage an f√ºr mpg_z=5 ü§Ø 11.3.2 Wir m√ºssen die Regressionsgerade umbiegen ‚Ä¶ wenn der vorhergesagte Wert eine Wahrscheinlichkeit, \\(p_i\\), ist. Die schwarze Gerade verl√§sst den Wertebereich der Wahrscheinlichkeit. Die blaue Kurve, \\(\\mathcal{f}\\), bleibt im erlaubten Bereich, \\(Pr(y) \\in [0,1]\\). Wir m√ºssen also die linke oder die rechte Seite des linearen Modells transformieren: \\(p_i = f(\\alpha + \\beta \\cdot x)\\) bzw.: \\(f(p) = \\alpha + \\beta \\cdot x\\) \\(\\mathcal{f}\\) nennt man eine Link-Funktion. 11.3.3 Verallgemeinerte lineare Modelle zur Rettung F√ºr metrische AV mit theoretisch unendlichen Grenzen des Wertebereichs haben wir bisher eine Normalverteilung verwendet: \\[y_i \\sim \\mathcal{N}(\\mu_i, \\sigma)\\] Dann ist die Normalverteilung eine voraussetzungsarme Wahl (maximiert die Entropie). Aber wenn die AV bin√§r ist bzw. H√§ufigkeiten modelliert, braucht man eine Variable die nur positive Werte zul√§sst. Diese Verallgemeinerung des linearen Modells bezeichnet man als verallgemeinertes lineares Modell (generalized linear model, GLM). Im Falle einer bin√§ren (bzw. dichotomen) AV liegt eine bestimmte Form des GLM vor, die man als logistische Regression bezeichnet. 11.4 Der Logit-Link Der Logit-Link wird auch \\(\\mathcal{L}\\), logit, Log-Odds oder Logit-Funktion genannt. Er ‚Äúbiegt‚Äù die lineare Funktion in die richtige Form. Der Logit-Link ordnet einen Parameter, der als Wahrscheinlichkeitsmasse definiert ist (und daher im Bereich von 0 bis 1 liegt), einem linearen Modell zu (das jeden beliebigen reellen Wert annehmen kann): \\[ \\begin{align} \\text{logit}(p_i) &amp;= \\alpha + \\beta x_i \\end{align} \\] Die Logit-Funktion \\(\\mathcal{L}\\) ist definiert als der (nat√ºrliche) Logarithmus des Verh√§ltnisses der Wahrscheinlichkeit zu Gegenwahrscheinlichkeit: \\[\\mathcal{L} = \\text{log} \\frac{p_i}{1-p_i}\\] Das Verh√§ltnis der Wahrscheinlichkeit zu Gegenwahrscheinlichkeit nennt man auch Odds. Also: \\[\\mathcal{L} = \\text{log} \\frac{p_i}{1-p_i} = \\alpha + \\beta x_i\\] 11.5 Aber warum? Forschungsfrage: H√§ngt das √úberleben (statistisch) auf der Titanic vom Geschlecht ab? Wie war eigentlich insgesamt, also ohne auf einen (oder mehrere) Pr√§diktoren zu bedingen, die √úberlebenswahrscheinlichkeit? data(titanic_train, package = &quot;titanic&quot;) m82 &lt;- lm(Survived ~ 1, data = titanic_train) coef(m82) ## (Intercept) ## 0.3838384 Die Wahrscheinlichkeit zu √úberleben \\(Pr(y=1)\\) lag bei einem guten Drittel (0.38). Das h√§tte man auch so ausrechnen: titanic_train %&gt;% count(Survived) %&gt;% mutate(prop = n/sum(n)) ## Survived n prop ## 1 0 549 0.6161616 ## 2 1 342 0.3838384 Anders gesagt: \\(p(y=1) = \\frac{549}{549+342} \\approx 0.38\\) 11.5.1 tidymodels, m83 Berechnen wir jetzt ein lineares Modell f√ºr die AV Survived mit dem Geschlecht als P√§diktor: d &lt;- titanic_train %&gt;% filter(Fare &gt; 0) %&gt;% mutate(iv = log(Fare), dv = factor(Survived)) Die Faktorstufen, genannt levels von Survived sind: levels(d$dv) ## [1] &quot;0&quot; &quot;1&quot; Und zwar genau in dieser Reihenfolge. 11.6 m83, glm Die klassische Methoden in R, ein logistisches Modell zu berechnen, ist mit der Funktion glm(). Tidymodels greift intern auf diese Funktion zur√ºck. Daher sind die Ergebnisse numerisch identisch. lm83 &lt;- glm(dv ~ iv, data = d, family = &quot;binomial&quot;) coef(lm83) ## (Intercept) iv ## -2.6827432 0.7479317 Achtung! Bei tidymodels muss bei einer Klassifikation die AV vom Type factor sein. Au√üerdem wird bei tidymodels, im Gegensatz zu (g)lm nicht die zweite, sondern die erste als Ereignis modelliert wird. Daher wechseln wir die referenzkategorie, wir ‚Äúre-leveln‚Äù, mit relevel(): d2 &lt;- titanic_train %&gt;% filter(Fare &gt; 0) %&gt;% mutate(iv = log(Fare), dv = factor(Survived), dv = relevel(dv, ref = &quot;1&quot;)) m83_mod &lt;- logistic_reg() m83_rec &lt;- recipe(dv ~ iv, data = d2) m83_wf &lt;- workflow() %&gt;% add_model(m83_mod) %&gt;% add_recipe(m83_rec) m83_fit &lt;- fit(m83_wf, data = d2) Hier sind die Koeffizienten: m83_fit %&gt;% tidy() %&gt;% gt() %&gt;% fmt_number(where(is.numeric)) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #yizlferiag .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #yizlferiag .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #yizlferiag .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #yizlferiag .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 6px; border-top-color: #FFFFFF; border-top-width: 0; } #yizlferiag .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #yizlferiag .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #yizlferiag .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #yizlferiag .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #yizlferiag .gt_column_spanner_outer:first-child { padding-left: 0; } #yizlferiag .gt_column_spanner_outer:last-child { padding-right: 0; } #yizlferiag .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #yizlferiag .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #yizlferiag .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #yizlferiag .gt_from_md > :first-child { margin-top: 0; } #yizlferiag .gt_from_md > :last-child { margin-bottom: 0; } #yizlferiag .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #yizlferiag .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #yizlferiag .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #yizlferiag .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #yizlferiag .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #yizlferiag .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #yizlferiag .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #yizlferiag .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #yizlferiag .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #yizlferiag .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #yizlferiag .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #yizlferiag .gt_sourcenote { font-size: 90%; padding: 4px; } #yizlferiag .gt_left { text-align: left; } #yizlferiag .gt_center { text-align: center; } #yizlferiag .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #yizlferiag .gt_font_normal { font-weight: normal; } #yizlferiag .gt_font_bold { font-weight: bold; } #yizlferiag .gt_font_italic { font-style: italic; } #yizlferiag .gt_super { font-size: 65%; } #yizlferiag .gt_footnote_marks { font-style: italic; font-weight: normal; font-size: 65%; } term estimate std.error statistic p.value (Intercept) 2.68 0.26 10.46 0.00 iv &minus;0.75 0.08 &minus;9.13 0.00 coefm83 &lt;- m83_fit %&gt;% tidy() %&gt;% pull(2) coefm83 ## [1] 2.6827432 -0.7479317 Definieren wir als \\(y=1\\) das zu modellierende Ereignis, hier ‚Äú√úberleben auf der Titanic‚Äù. Wie wir oben schon gesehen haben, funktioniert die lineare Regression nicht einwandfrei bei bin√§ren (oder dichotomen) AV. 11.6.1 Wahrscheinlichkeit in Odds Probieren wir Folgendes: Rechnen wir die Wahrscheinlichkeit zu √úberlegen f√ºr \\(y\\), kurz \\(p\\), in Odds um. \\(odds = \\frac{p}{1-p}\\) In R: odds &lt;- 0.38 / 0.62 odds ## [1] 0.6129032 Bildlich gesprochen: f√ºr 38 Menschen, die √ºberlebt haben, kommen (ca.) 62 Menschen, die nicht √ºberlebt haben, s. Abb. 11.2. d2_odds &lt;- tibble(x = c(rep(&quot;0&quot;, 38), rep(&quot;1&quot;, 62)), y = c(rep(1, 38), rep(1, 62))) d2_odds %&gt;% ggplot(aes(x, y)) + geom_jitter(width = .2, alpha = .7) Figure 11.2: Odds: 38 zu 62 Plotten wir die Odds als Funktion der UV, s. Abb. 11.3. Figure 11.3: Odds als Funktion der UV Wir sind noch nicht am Ziel; die Variable ist noch nicht ‚Äúrichtig gebogen‚Äù. 11.6.2 Von Odds zu Log-Odds Wenn wir jetzt den Logarithmus berechnen der Log-Odds bekommen wir eine ‚Äúbrav gebogenen‚Äù Funktion, die Log-Odds, \\(\\mathcal{L}\\), als Funktion der UV, s. Abb. 11.4. \\[\\mathcal{L} = log (odds) = log \\left(\\frac{p}{1-p}\\right)\\] Figure 11.4: Logit als Funktion der UV Linear! Es gilt also: \\[\\text {log-odds} = b_0 + b_1x\\] Log-Odds (Log-Odds) bezeichnet man auch als Logits. 11.7 Inverser Logit Um nach \\(p\\) aufzul√∂sen, m√ºssen wir einige Algebra bem√ºhen: \\[ \\begin{align} \\text{log} \\frac{p}{1-p} &amp;= \\alpha + \\beta x &amp; &amp; \\text{Exponentieren}\\\\ \\frac{p}{1-p} &amp;= e^{\\alpha + \\beta x} \\\\ p_i &amp;= e^{\\alpha + \\beta x_i} (1-p) &amp; &amp; \\text{Zur Vereinfachung: } x := e^{\\alpha + \\beta x_i} \\\\ p_i &amp;= x (1-p) \\\\ &amp;= x - xp \\\\ p + px &amp;= x \\\\ p(1+x) &amp;= x \\\\ p &amp;= \\frac{x} {1+x} &amp; &amp; \\text{L√∂sen wir x wieder auf.} \\\\ p &amp;= \\frac{e^{\\alpha + \\beta x_i}}{1 + e^{\\alpha + \\beta x_i}} = \\mathcal{L}^{-1} \\end{align} \\] Diese Funktion nennt man auch inverser Logit, \\(\\text{logit}^{-1}, \\mathcal{L}^{-1}\\). Zum Gl√ºck macht das alles die Rechenmaschine f√ºr uns üòÑ. 11.8 Vom Logit zur Klasse Praktisch k√∂nnen wir uns die Logits und ihre zugeh√∂rige Wahrscheinlichkeit einfach ausgeben lassen mit R. Und die vorhergesagte Klasse (.pred_class) auch: d3 &lt;- d2 %&gt;% bind_cols(predict(m83_fit, new_data = d2, type = &quot;prob&quot;)) %&gt;% bind_cols(predict(m83_fit, new_data = d2)) %&gt;% # Klasse bind_cols(logits = predict(m83_fit, new_data = d2, type = &quot;raw&quot;)) # Logits d3 %&gt;% slice_head(n = 3) %&gt;% select(Name, last_col()) ## Name logits ## 1 Braund, Mr. Owen Harris 1.2010894 ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) -0.5084287 ## 3 Heikkinen, Miss. Laina 1.1345079 11.8.1 Grenzwert wechseln Im Standard wird 50% als Grenzwert f√ºr die vorhergesagte Klasse \\(c\\) genommen: wenn \\(p &lt;= .5 \\rightarrow c = 0\\) wenn \\(p &gt; .5 \\rightarrow c = 1\\) Man kann aber den Grenzwert beliebig w√§hlen, um Kosten-Nutzen-Abw√§gungen zu optimieren; mehr dazu findet sich z.B. hier. 11.9 Logit und Inverser Logit 11.9.1 Logit \\((0,1) \\rightarrow (-\\infty, +\\infty)\\) ggplot() + annotate(&quot;segment&quot;, x = 0, xend = 0, y = 0, yend = 1) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;p&quot;, &quot;Logit&quot;)) + scale_y_continuous(breaks = NULL) + annotate(&quot;label&quot;, x = c(0, 0), y = c(0, 1), label = c(&quot;0&quot;, &quot;1&quot;)) + annotate(&quot;segment&quot;, x = 1, xend = 1, y = -1, yend = 2) + annotate(&quot;segment&quot;, x = 1, xend = 1, y = -2, yend = 3, linetype = &quot;dotted&quot;) + annotate(&quot;label&quot;, x = c(1, 1), y = c(-2, 3), label = c(&quot;-‚àû&quot;, &quot;+‚àû&quot;)) + annotate(&quot;segment&quot;, x = 0.02, xend = 0.98, y = 0, yend = -2, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) + annotate(&quot;segment&quot;, x = 0.02, xend = 0.98, y = 1, yend = 3, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) + labs(x = &quot;&quot;, y = &quot;&quot;) + annotate(&quot;label&quot;, x = c(1.01), y = c(.5), label = c(&quot;0&quot;), size = 4) + labs(x = &quot;&quot;, y = &quot;&quot;) + annotate(&quot;label&quot;, x = c(-0.01), y = c(.5), label = c(&quot;0.5&quot;), size = 4) + annotate(&quot;segment&quot;, x = 0.02, xend = 0.98, yend = .5, y = .5, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) Praktisch, um Wahrscheinlichkeit zu modellieren. \\[p \\rightarrow \\fbox{logit} \\rightarrow \\alpha + \\beta x\\] 11.9.2 Inv-Logit \\((-\\infty, +\\infty) \\rightarrow (0,1)\\) ggplot() + annotate(&quot;segment&quot;, x = 0, xend = 0, y = 0, yend = 1) + scale_x_continuous(breaks = c(0,1), labels = c(&quot;p&quot;, &quot;Logit&quot;)) + scale_y_continuous(breaks = NULL) + annotate(&quot;label&quot;, x = c(0, 0), y = c(0, 1), label = c(&quot;0&quot;, &quot;1&quot;)) + annotate(&quot;segment&quot;, x = 1, xend = 1, y = -1, yend = 2) + annotate(&quot;segment&quot;, x = 1, xend = 1, y = -2, yend = 3, linetype = &quot;dotted&quot;) + annotate(&quot;label&quot;, x = c(1, 1), y = c(-2, 3), label = c(&quot;-‚àû&quot;, &quot;+‚àû&quot;)) + annotate(&quot;segment&quot;, xend = 0.02, x = 0.98, yend = 0, y = -2, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) + annotate(&quot;segment&quot;, xend = 0.02, x = 0.98, yend = 1, y = 3, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) + annotate(&quot;label&quot;, x = c(1.01), y = c(.5), label = c(&quot;0&quot;), size = 3) + labs(x = &quot;&quot;, y = &quot;&quot;) + annotate(&quot;label&quot;, x = c(-0.01), y = c(.5), label = c(&quot;0.5&quot;), size = 3) + annotate(&quot;segment&quot;, xend = 0.02, x = 0.98, yend = .5, y = .5, #linetype = &quot;dotted&quot;, size = 0.1, arrow = arrow()) Praktisch, um in Wahrscheinlichkeiten umzurechnen. \\[p \\leftarrow \\fbox{inv-logit} \\leftarrow \\alpha + \\beta x\\] 11.10 Logistische Regression im √úberblick Eine Regression mit binomial verteilter AV und Logit-Link nennt man logistische Regression. Man verwendet die logistische Regression um binomial verteilte AV zu modellieren, z.B. Wie hoch ist die Wahrscheinlichkeit, dass ein Kunde das Produkt kauft? Wie hoch ist die Wahrscheinlichkeit, dass ein Mitarbeiter k√ºndigt? Wie hoch ist die Wahrscheinlichkeit, die Klausur zu bestehen? Die logistische Regression ist eine normale, lineare Regression f√ºr den Logit von \\(Pr(y=1)\\), wobei \\(y\\) (AV) binomialvereteilt mit \\(n=1\\) angenommen wird: \\[ \\begin{align} y_i &amp;\\sim \\mathcal{B}(1, p_i) \\\\ \\text{logit}(p_i) &amp;= \\alpha + \\beta x_i \\end{align} \\] Da es sich um eine normale, lineare Regression handelt, sind alle bekannten Methoden und Techniken der linearen Regression zul√§ssig. Da Logits nicht einfach zu interpretieren sind, rechnet man nach der Berechnung des Modells den Logit h√§ufig in Wahrscheinlichkeiten um. 11.10.1 Die Koeffizienten sind schwer zu interpretieren s_fun &lt;- function(x) exp(x) / (1 + exp(x)) inv_logist &lt;- function(x) x p_logist1 &lt;- ggplot(tibble(x=c(-2,2))) + aes(x=x) + labs(x = &quot;x&quot;, title = &quot;Logistische Regression&quot;, y = &quot;Pr(y=1)=p&quot;) + scale_x_continuous(limits = c(-3,3)) + scale_y_continuous(limits = c(-0.5, 1.5)) + stat_function( fun = plogis) p_logist2 &lt;- ggplot(tibble(x=c(-2,2))) + aes(x=x) + labs(x = &quot;x&quot;, title = &quot;Lineare Regression&quot;, y = &quot;Logit&quot;) + scale_x_continuous(limits = c(-3,3)) + scale_y_continuous(limits = c(-5, 5)) + stat_function(fun = inv_logist) p_logist1 + p_logist2 In der logistischen Regression gilt nicht mehr, dass eine konstante Ver√§nderung in der UV mit einer konstanten Ver√§nderung in der AV einhergeht. Stattdessen geht eine konstante Ver√§nderung in der UV mit einer konstanten Ver√§nderung im Logit der AV einher. Beim logistischen Modell hier gilt, dass in der N√§he von \\(x=0\\) die gr√∂√üte Ver√§nderung in \\(p\\) von statten geht; je weiter weg von \\(x=0\\), desto geringer ist die Ver√§nderung in \\(p\\). 11.10.2 Logits vs.¬†Wahrscheinlichkeiten konvert_logits &lt;- tibble( logit = c( -10, -3, -2, -1, -0.5, -.25, 0, .25, .5, 1, 2, 3, 10), p = rstanarm::invlogit(logit) ) %&gt;% gt() %&gt;% fmt_number(everything(), decimals = 2) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
